{
  "articles": [
    {
      "title": "The Legal Tech Toolkit: Prompts for Contract Review, Analysis, and Compliance",
      "category": "legal-tech",
      "level": "advanced",
      "tags": ["legal", "contracts", "compliance", "risk-analysis"],
      "content": "## Introduction: AI as a Legal Co-Pilot, Not a Lawyer\n\n**⚠️ CRITICAL DISCLAIMER:** LLMs are not lawyers. They are analytical tools requiring rigorous verification by qualified legal experts.\n\n## Core Principles of Legal Prompt Engineering\n\n1. **Specificity** - Use unambiguous legal terminology\n2. **Context** - Include jurisdiction, parties, case details\n3. **Clear Objectives** - State exact output needed\n4. **Format Specification** - Memo, email, table, etc.\n\n## Prompt 1: Contract Summary and Risk Analysis\n\n**Use Case:** Quick understanding of key terms and problematic clauses\n\n**Template:**\n```\nRole: You are an experienced corporate paralegal with expertise in commercial contract analysis.\n\nContext:\n- Contract Type: [e.g., Software License Agreement]\n- Governing Law: [e.g., California]\n- Our Role: Our company is the [Licensee/Licensor]\n\nTask:\nAnalyze the contract and generate:\n\n1. Executive Summary: One paragraph covering:\n   - Parties\n   - Term\n   - Payment Obligations\n   - Scope of Services\n\n2. Risk Analysis: Bulleted list of unfavorable clauses:\n   - Clause number\n   - Risk explanation\n   - Risk rating (Low/Medium/High)\n\n3. Missing Clauses: Standard clauses that should be present:\n   - Confidentiality\n   - Data Protection\n   - Force Majeure\n\nContract:\n[PASTE FULL CONTRACT TEXT]\n```\n\n## Prompt 2: Clause-Specific Redlining\n\n**Use Case:** Deep-dive analysis and suggested edits\n\n**Template:**\n```\nRole: Senior associate attorney specializing in technology contracts.\n\nContext:\n- Our Role: Licensee in software license agreement\n- Company Policy: Limitation of Liability must cap at total fees paid in preceding 12 months. Uncapped liability for data breaches is unacceptable.\n\nTask:\n1. Compliance Check: Does clause comply with our policy?\n2. Deviation Analysis: Identify specific non-compliant language\n3. Redlining Suggestion: Provide track-changes format revision\n\nClause:\n[PASTE SPECIFIC CLAUSE]\n```\n\n## Prompt 3: RAG-Based Compliance Check\n\n**Use Case:** Validate entire contract against internal playbook\n\n**Conceptual RAG Workflow:**\n\n1. **Retrieve:** Extract relevant sections from contract\n2. **Retrieve:** Get internal policy document\n3. **Augment Prompt:**\n```\nRole: Meticulous compliance analyst specializing in data privacy.\n\nContext:\n- Company Policy: [FULL POLICY TEXT]\n- Contract Clauses: [EXTRACTED CLAUSES]\n\nTask:\nPerform gap analysis. Create table:\n| Policy Requirement | Contract Clause Reference | Compliance Status | Explanation |\n```\n\n## Ethical Checklist\n\n### Confidentiality\n- [ ] Never use public AI tools for client data\n- [ ] Only use enterprise platforms with data privacy agreements\n- [ ] Verify security controls\n\n### Accuracy\n- [ ] Lawyer is ultimately responsible\n- [ ] All AI outputs must be verified\n- [ ] No blind reliance on AI analysis\n\n### Competence\n- [ ] Understand LLM capabilities and limitations\n- [ ] Properly supervise junior staff using AI\n- [ ] Maintain professional standards\n\n## Best Practices\n\n1. **Always verify** - Human lawyer review required\n2. **Provide context** - Jurisdiction, parties, policies\n3. **Be specific** - Exact terminology and requirements\n4. **Use RAG** - Ground in authoritative sources\n5. **Maintain ethics** - Confidentiality and competence\n\n## Conclusion\n\nLLMs can accelerate legal work but:\n- Are not substitutes for lawyers\n- Require rigorous verification\n- Must respect ethical obligations\n- Need proper security controls\n\nUse as co-pilot, not autopilot."
    },
    {
      "title": "The Code Documenter's Co-Pilot: Auto-Generating READMEs, Docstrings, and API Docs",
      "category": "code-documentation",
      "level": "intermediate",
      "tags": ["documentation", "readme", "docstrings", "api-docs"],
      "content": "## Introduction: The Chore of Documentation\n\nDocumentation is essential but often neglected. LLMs can automate much of this process, ensuring docs keep pace with development.\n\n## Prompt 1: Comprehensive README Generation\n\n**Use Case:** Create complete README for new or existing project\n\n**Best Practice:** Advanced tools like `readme-ai` first analyze the codebase:\n- Parse files\n- Identify dependencies\n- Map directory structure\n- Detect key functions\n\n**Template:**\n```\nRole: Expert technical writer and open-source developer.\n\nContext:\nProject: [Project Name]\nPurpose: [One-sentence summary]\nTechnologies: [Python, asyncio, aiohttp, Pydantic]\nFile Structure:\n```\n/src\n  /scraper\n    core.py\n  /parser\n    html_parser.py\n/tests\nrequirements.txt\n```\nSetup: Dependencies in requirements.txt, install via pip\nCore: Main entry point is scrape_url() in src/scraper/core.py\n\nTask:\nGenerate README.md with:\n1. Project Title and compelling introduction\n2. Key Features (bulleted list)\n3. Installation (step-by-step code blocks)\n4. Usage (self-contained example)\n5. Project Structure (directory explanations)\n6. Contributing (standard section)\n```\n\n## Prompt 2: Function Docstrings\n\n**Use Case:** Generate detailed, standardized function documentation\n\n**Template:**\n```\nRole: Senior Python developer who writes clean, well-documented code.\n\nTask:\nWrite complete docstring for this function in Google format.\n\nInclude:\n1. One-line summary\n2. Detailed explanation of behavior\n3. Args: (name, type, description)\n4. Returns: (type, description)\n5. Raises: (exceptions)\n\nFunction:\n```python\n[PASTE FULL FUNCTION CODE]\n```\n```\n\n## Prompt 3: API Endpoint Documentation\n\n**Use Case:** Create developer-friendly API reference\n\n**Template:**\n```\nRole: Professional technical writer creating API documentation.\n\nContext: Documenting endpoint for public REST API\n\nTask: Generate Markdown documentation for:\n\nEndpoint: POST /v1/users\nDescription: Creates new user account (requires unique email)\n\nRequest Body (JSON):\n- username (string, required): Desired username\n- email (string, required): Unique email address\n- password (string, required): Password (min 8 characters)\n\nSuccess Response (201 Created):\n- userId (string): Unique identifier\n- username (string): Username\n- createdAt (datetime): Creation timestamp\n\nError Response (409 Conflict):\nReturned if email already exists\n\nYour documentation should include:\n- HTTP method and path\n- Brief description\n- Request body parameters (detailed)\n- Example request JSON\n- Success response description\n- Example success response JSON\n- Error response descriptions\n```\n\n## Best Practices\n\n### Context\n- [ ] Provide full code block for functions\n- [ ] Include signature and body\n- [ ] Show data structures\n\n### Intent Documentation\n- [ ] Document the \"why\" not just \"what\"\n- [ ] Explain design decisions\n- [ ] Note trade-offs\n- [ ] Include original prompt as comment\n\n### Standardization\n- [ ] Specify format (JSDoc, Google Style, OpenAPI)\n- [ ] Enforce consistency\n- [ ] Use style guides\n\n### Quality\n- [ ] Human review required\n- [ ] Verify accuracy\n- [ ] Test examples\n- [ ] Update with code changes\n\n## Conclusion\n\nLLMs accelerate documentation by:\n- Generating boilerplate\n- Enforcing standards\n- Maintaining consistency\n- Reducing manual effort\n\nBut require:\n- Full code context\n- Clear format specifications\n- Human review and validation\n- Regular updates"
    },
    {
      "title": "The Customer Support Automator: Ticket Classification, Routing, and Response Generation",
      "category": "customer-support",
      "level": "intermediate",
      "tags": ["automation", "customer-service", "classification", "routing"],
      "content": "## Introduction\n\nCustomer support automation with LLMs can:\n- Categorize tickets automatically\n- Route to correct teams\n- Generate initial responses\n- Reduce manual workload\n- Improve response times\n\n**Key:** Use structured outputs for reliability\n\n## Prompt 1: Multi-Label Classification\n\n**Use Case:** Transform raw ticket into structured data\n\n**Template:**\n```\nRole: AI classification engine for B2C e-commerce support team.\n\nTask: Analyze ticket and classify per JSON format.\nReturn ONLY valid JSON.\n\nJSON Schema:\n{\n  \"category\": \"Enum<Billing | Technical Issue | Order Status | Product Inquiry | Other>\",\n  \"urgency\": \"Enum<Low | Medium | High | Critical>\",\n  \"sentiment\": \"Enum<Positive | Neutral | Negative | Angry>\",\n  \"summary\": \"One-sentence core issue\",\n  \"confidence_score\": \"Float 0.0-1.0\"\n}\n\nInstructions:\n- Analyze ticket for category, urgency, sentiment\n- Summary captures main reason for contact\n- Confidence reflects certainty of classification\n\nTicket:\n[PASTE FULL TICKET TEXT]\n```\n\n**Why Structured Output:**\n- Machine-readable\n- Consistent parsing\n- Programmatic use\n- No ambiguity\n\n## Prompt 2: Intelligent Routing\n\n**Use Case:** Recommend appropriate support team\n\n**Template:**\n```\nRole: Intelligent routing system for helpdesk.\n\nContext:\nTicket classified as:\n```json\n{\n  \"category\": \"Technical Issue\",\n  \"urgency\": \"High\",\n  \"sentiment\": \"Negative\",\n  \"summary\": \"Cannot login to account\"\n}\n```\n\nOur Teams:\n- Billing Team: Payments, invoices, refunds, subscriptions\n- Technical Support: Technical problems, bugs, website errors\n- Logistics Team: Order status, shipping, tracking, returns\n- General Inquiries: Pre-sale questions, general info\n\nTask:\nIdentify single most appropriate team.\nProvide only team name.\n```\n\n## Prompt 3: Automated First Response\n\n**Use Case:** Immediate, empathetic acknowledgment\n\n**Template:**\n```\nRole: Friendly, helpful, empathetic customer support agent.\n\nContext:\nTicket Analysis:\n```json\n{\n  \"category\": \"Order Status\",\n  \"summary\": \"Package not delivered\",\n  \"sentiment\": \"Negative\"\n}\n```\nAssigned Team: Logistics Team\n\nTask:\nDraft warm, professional first response that:\n- Addresses customer by name (if available)\n- Acknowledges specific issue with empathy\n- Confirms ticket received and routed correctly\n- Sets expectation (\"Specialist will respond within 24 hours\")\n- Maintains helpful, reassuring tone\n```\n\n## Workflow: Chaining the Prompts\n\n**Automated Sequence:**\n\n1. New ticket created\n2. **Prompt 1** → Classify ticket (get JSON)\n3. Parse JSON output\n4. **Prompt 2** → Determine routing (get team name)\n5. **Prompt 3** → Generate response (get email text)\n6. Send email to customer\n7. Route ticket to team queue\n\n**Result:** Zero manual intervention for initial processing\n\n## Best Practices\n\n### Structured Outputs\n- [ ] Use JSON with defined schemas\n- [ ] Specify enums for categories\n- [ ] Request confidence scores\n- [ ] Validate parsing\n\n### Routing Logic\n- [ ] Clear team definitions\n- [ ] Unambiguous responsibilities\n- [ ] Fallback for edge cases\n- [ ] Escalation paths\n\n### Response Quality\n- [ ] Empathetic tone\n- [ ] Specific acknowledgment\n- [ ] Clear next steps\n- [ ] Realistic timeframes\n\n### Monitoring\n- [ ] Track classification accuracy\n- [ ] Monitor routing correctness\n- [ ] Measure response quality\n- [ ] Gather customer feedback\n\n## Conclusion\n\nAutomated support workflow:\n1. Classify with structured output\n2. Route intelligently\n3. Respond immediately\n4. Free humans for complex issues\n\nRequires:\n- Well-defined schemas\n- Clear team boundaries\n- Quality monitoring\n- Continuous improvement"
    }
  ],
  "playbooks": []
}
