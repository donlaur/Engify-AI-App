name: API Contract Testing

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/app/api/**'
      - 'src/lib/api/**'
      - 'docs/api/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/app/api/**'
      - 'src/lib/api/**'
      - 'docs/api/**'

jobs:
  api-contract-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run API contract tests
        run: npm test src/lib/api/__tests__/contract-testing.test.ts
        
      - name: Run API documentation tests
        run: npm test src/lib/api/__tests__/documentation-validation.test.ts
        
      - name: Validate OpenAPI specification
        run: |
          npx @apidevtools/swagger-parser validate docs/api/openapi.yaml
          
      - name: Generate API coverage report
        run: |
          npm test -- --coverage --testPathPattern="src/lib/api/__tests__"
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: api-contract-tests
          name: api-contract-coverage
          
  api-documentation-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate API documentation
        run: |
          # Check if all API routes are documented
          echo "Validating API documentation completeness..."
          
          # Find all API routes
          API_ROUTES=$(find src/app/api -name "route.ts" | wc -l)
          DOCUMENTED_ROUTES=$(grep -r "POST\|GET\|PUT\|DELETE" docs/api/OPENAPI_SPECIFICATION.md | wc -l)
          
          echo "API Routes: $API_ROUTES"
          echo "Documented Routes: $DOCUMENTED_ROUTES"
          
          if [ $API_ROUTES -gt $DOCUMENTED_ROUTES ]; then
            echo "❌ Some API routes are not documented"
            exit 1
          else
            echo "✅ All API routes are documented"
          fi
          
      - name: Check API documentation formatting
        run: |
          # Validate markdown formatting
          npx markdownlint docs/api/OPENAPI_SPECIFICATION.md
          npx markdownlint docs/api/API_GUIDE.md
          
      - name: Validate Postman collection
        run: |
          # Check if Postman collection is valid JSON
          python3 -m json.tool docs/api/postman/engify-api-collection.json > /dev/null
          echo "✅ Postman collection is valid JSON"
          
  api-performance-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start application
        run: |
          npm run build
          npm start &
          sleep 10
          
      - name: Run API performance tests
        run: |
          # Test API response times
          echo "Testing API performance..."
          
          # Test health endpoint
          HEALTH_RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:3000/api/v2/health)
          echo "Health endpoint response time: ${HEALTH_RESPONSE_TIME}s"
          
          # Test AI execution endpoint (with mock data)
          AI_RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' \
            -X POST http://localhost:3000/api/v2/ai/execute \
            -H "Content-Type: application/json" \
            -d '{"prompt":"test","provider":"openai"}' || echo "0")
          echo "AI execution endpoint response time: ${AI_RESPONSE_TIME}s"
          
          # Validate response times are reasonable
          if (( $(echo "$HEALTH_RESPONSE_TIME < 1.0" | bc -l) )); then
            echo "✅ Health endpoint performance is acceptable"
          else
            echo "❌ Health endpoint performance is too slow"
            exit 1
          fi
          
      - name: Test rate limiting
        run: |
          echo "Testing rate limiting..."
          
          # Make multiple requests to test rate limiting
          for i in {1..15}; do
            curl -o /dev/null -s -w '%{http_code}' \
              -X POST http://localhost:3000/api/v2/ai/execute \
              -H "Content-Type: application/json" \
              -d '{"prompt":"test","provider":"openai"}' &
          done
          
          wait
          echo "✅ Rate limiting test completed"
          
  api-security-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start application
        run: |
          npm run build
          npm start &
          sleep 10
          
      - name: Run API security tests
        run: |
          echo "Testing API security..."
          
          # Test SQL injection protection
          echo "Testing SQL injection protection..."
          SQL_INJECTION_RESPONSE=$(curl -s -w '%{http_code}' \
            -X POST http://localhost:3000/api/v2/ai/execute \
            -H "Content-Type: application/json" \
            -d '{"prompt":"test; DROP TABLE users; --","provider":"openai"}' | tail -c 3)
          
          if [ "$SQL_INJECTION_RESPONSE" = "400" ]; then
            echo "✅ SQL injection protection is working"
          else
            echo "❌ SQL injection protection may be insufficient"
          fi
          
          # Test XSS protection
          echo "Testing XSS protection..."
          XSS_RESPONSE=$(curl -s -w '%{http_code}' \
            -X POST http://localhost:3000/api/v2/ai/execute \
            -H "Content-Type: application/json" \
            -d '{"prompt":"<script>alert(\"xss\")</script>","provider":"openai"}' | tail -c 3)
          
          if [ "$XSS_RESPONSE" = "400" ]; then
            echo "✅ XSS protection is working"
          else
            echo "❌ XSS protection may be insufficient"
          fi
          
          # Test authentication requirements
          echo "Testing authentication requirements..."
          AUTH_RESPONSE=$(curl -s -w '%{http_code}' \
            -X POST http://localhost:3000/api/v2/ai/execute \
            -H "Content-Type: application/json" \
            -d '{"prompt":"test","provider":"openai"}' | tail -c 3)
          
          if [ "$AUTH_RESPONSE" = "401" ]; then
            echo "✅ Authentication is required"
          else
            echo "❌ Authentication may not be properly enforced"
          fi
          
      - name: Test CORS configuration
        run: |
          echo "Testing CORS configuration..."
          
          # Test CORS preflight request
          CORS_RESPONSE=$(curl -s -w '%{http_code}' \
            -X OPTIONS http://localhost:3000/api/v2/ai/execute \
            -H "Origin: https://engify.ai" \
            -H "Access-Control-Request-Method: POST" \
            -H "Access-Control-Request-Headers: Content-Type" | tail -c 3)
          
          if [ "$CORS_RESPONSE" = "200" ]; then
            echo "✅ CORS preflight is working"
          else
            echo "❌ CORS preflight may not be configured correctly"
          fi
          
  api-integration-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        run: |
          # Start MongoDB for testing
          docker run -d --name mongodb-test -p 27017:27017 mongo:latest
          sleep 5
          
      - name: Run integration tests
        run: |
          # Set test environment variables
          export MONGODB_URI="mongodb://localhost:27017/engify-test"
          export NEXTAUTH_SECRET="test-secret"
          export NEXTAUTH_URL="http://localhost:3000"
          
          # Run integration tests
          npm test -- --testPathPattern="integration"
          
      - name: Cleanup test database
        if: always()
        run: |
          docker stop mongodb-test
          docker rm mongodb-test
          
  api-deployment-validation:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Validate build output
        run: |
          # Check if API routes are built correctly
          if [ -d ".next/server/app/api" ]; then
            echo "✅ API routes built successfully"
          else
            echo "❌ API routes not found in build output"
            exit 1
          fi
          
      - name: Test production build
        run: |
          npm start &
          sleep 10
          
          # Test health endpoint
          HEALTH_STATUS=$(curl -s -w '%{http_code}' http://localhost:3000/api/v2/health | tail -c 3)
          
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "✅ Production build is working"
          else
            echo "❌ Production build has issues"
            exit 1
          fi
          
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your deployment commands here
          
      - name: Run post-deployment tests
        run: |
          echo "🧪 Running post-deployment tests..."
          # Add your post-deployment test commands here
